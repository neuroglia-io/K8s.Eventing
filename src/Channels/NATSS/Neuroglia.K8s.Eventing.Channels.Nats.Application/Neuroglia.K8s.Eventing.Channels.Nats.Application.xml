<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.K8s.Eventing.Channels.Nats.Application</name>
    </assembly>
    <members>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommand">
            <summary>
            Represents the command used to publish a <see cref="T:CloudNative.CloudEvents.CloudEvent"/>
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommand.#ctor(CloudNative.CloudEvents.CloudEvent)">
            <summary>
            Initialize a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommand"/>
            </summary>
            <param name="e">The <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to publish</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommand.Event">
            <summary>
            Gets the <see cref="T:CloudNative.CloudEvents.CloudEvent"/> to publish
            </summary>
        </member>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler">
            <summary>
            Represents the service used to handle <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommand"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler},Neuroglia.K8s.Eventing.Channels.Nats.Infrastructure.Services.IEventChannel)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="channel">The service that wraps the the underlying NATS Streaming connection</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler.Channel">
            <summary>
            Gets the service that wraps the the underlying NATS Streaming connection
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommandHandler.Handle(Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.PublishCloudEventCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommand">
            <summary>
            Represents the command used to create a new subscription
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommand.#ctor(Neuroglia.K8s.Eventing.Gateway.Integration.Models.SubscriptionOptionsDto)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommand"/>
            </summary>
            <param name="subscriptionOptions">The options used to configure the subscription to create</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommand.SubscriptionOptions">
            <summary>
            Gets the options used to configure the subscription to create
            </summary>
        </member>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler">
            <summary>
            Represents the service used to handle <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommand"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler},Neuroglia.K8s.Eventing.Channels.Nats.Infrastructure.Services.IEventChannel)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="channel">The service that wraps the the underlying NATS Streaming connection</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler.Channel">
            <summary>
            Gets the service that wraps the the underlying NATS Streaming connection
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommandHandler.Handle(Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.SubscribeCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommand">
            <summary>
            Represents the command used to delete an existing subscription
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommand.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommand"/>
            </summary>
            <param name="subscriptionId">The id of the subscription to delete</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommand.SubscriptionId">
            <summary>
            Gets the id of the subscription to delete
            </summary>
        </member>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler">
            <summary>
            Represents the service used to handle <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommand"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler},Neuroglia.K8s.Eventing.Channels.Nats.Infrastructure.Services.IEventChannel)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="channel">The service that wraps the the underlying NATS Streaming connection</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler.Channel">
            <summary>
            Gets the service that wraps the the underlying NATS Streaming connection
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommandHandler.Handle(Neuroglia.K8s.Eventing.Channels.Nats.Application.Commands.UnsubscribeCommand,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask">
            <summary>
            Represents the <see cref="T:Neuroglia.StartupTasks.StartupTask"/> used to initialize the <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Infrastructure.Services.IEventChannel"/> service
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask.#ctor(Microsoft.Extensions.Logging.ILogger{Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask},Neuroglia.StartupTasks.IStartupTaskManager,Neuroglia.K8s.Eventing.Channels.Nats.Infrastructure.Services.IEventChannel)">
            <summary>
            Initializes a new <see cref="T:Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask"/>
            </summary>
            <param name="logger">The service used to perform logging</param>
            <param name="startupTaskManager">The service used to manage <see cref="T:Neuroglia.StartupTasks.IStartupTask"/>s</param>
            <param name="channel">The service that wraps the the underlying NATS Streaming connection</param>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask.Logger">
            <summary>
            Gets the service used to perform logging
            </summary>
        </member>
        <member name="P:Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask.Channel">
            <summary>
            Gets the service that wraps the the underlying NATS Streaming connection
            </summary>
        </member>
        <member name="M:Neuroglia.K8s.Eventing.Channels.Nats.Application.StartupTasks.EventChannelInitializationTask.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
